exports.id = "server";
exports.modules = {

/***/ "./src/server/routes/gethelp.ts":
/*!**************************************!*\
  !*** ./src/server/routes/gethelp.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regenerator-runtime */ \"regenerator-runtime\");\n/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! express */ \"express\");\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(express__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _googlemaps_google_maps_services_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @googlemaps/google-maps-services-js */ \"@googlemaps/google-maps-services-js\");\n/* harmony import */ var _googlemaps_google_maps_services_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_googlemaps_google_maps_services_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _models_services__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/services */ \"./src/server/models/services.ts\");\n/* harmony import */ var _models_resources__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/resources */ \"./src/server/models/resources.ts\");\n/* harmony import */ var _models_category__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/category */ \"./src/server/models/category.ts\");\n/* harmony import */ var _models_transactionLogger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/transactionLogger */ \"./src/server/models/transactionLogger.ts\");\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\n\n\n\n\n\n\nvar router = Object(express__WEBPACK_IMPORTED_MODULE_1__[\"Router\"])();\nvar calculateMiles = function(kilometer) {\n    var milesFactor = 0.621371;\n    var val = parseInt(kilometer.slice(0, -3).replace(\",\", \"\"));\n    return (val * milesFactor).toFixed(2);\n};\nvar getData = function() {\n    var _ref = _asyncToGenerator(regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(query_params_resource, query_params_service, user_location, city, miles, datafilter) {\n        var resource_pipeline, service_pipeline, resources, services, ref, destinations, k, geocodearray, client, j, ref1, geocodedaddress, distance_matrix_userlocation, distance_matrix_city, j, i;\n        return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_ctx) {\n            while(1)switch(_ctx.prev = _ctx.next){\n                case 0:\n                    console.log(\"inside getdata\");\n                    console.log(query_params_resource);\n                    console.log(user_location);\n                    console.log(city);\n                    resource_pipeline = [\n                        {\n                            $match: query_params_resource\n                        },\n                        {\n                            $project: {\n                                resourceuserId: {\n                                    $toObjectId: \"$UserId\"\n                                },\n                                _id: 1,\n                                Resource_Name: 1,\n                                UserId: 1,\n                                Category: 1,\n                                Phone_Number: 1,\n                                Description: 1,\n                                SKU: 1,\n                                Address: 1,\n                                City: 1,\n                                State: 1,\n                                Zipcode: 1,\n                                Country: 1,\n                                ImageUrl: {\n                                    $ifNull: [\n                                        \"$ImageUrl\",\n                                        \"\"\n                                    ]\n                                }\n                            }\n                        },\n                        {\n                            $lookup: {\n                                from: \"User\",\n                                localField: \"resourceuserId\",\n                                foreignField: \"_id\",\n                                as: \"addresses\"\n                            }\n                        },\n                        {\n                            $unwind: \"$addresses\"\n                        },\n                        {\n                            $project: {\n                                _id: 1,\n                                Name: \"$Resource_Name\",\n                                UserId: 1,\n                                Category: 1,\n                                Phone_Number: 1,\n                                Description: 1,\n                                SKU: 1,\n                                owner_name: {\n                                    $concat: [\n                                        \"$addresses.firstName\",\n                                        \",\",\n                                        \"$addresses.lastName\"\n                                    ]\n                                },\n                                address: {\n                                    $concat: [\n                                        \"$Address\",\n                                        \", \",\n                                        \"$City\",\n                                        \", \",\n                                        \"$State\",\n                                        \", \",\n                                        {\n                                            $toString: \"$Zipcode\"\n                                        }, \n                                    ]\n                                },\n                                distance: \"40\",\n                                availableDate: \"\",\n                                Availability: \"\",\n                                type: \"resource\",\n                                ImageUrl: 1,\n                                owner_email: \"$addresses.userName\",\n                                markertitle: {\n                                    $concat: [\n                                        \"$Resource_Name\",\n                                        \" at \",\n                                        \"$Address\",\n                                        \", \",\n                                        \"$City\",\n                                        \", \",\n                                        \"$State\",\n                                        \", \",\n                                        {\n                                            $toString: \"$Zipcode\"\n                                        }, \n                                    ]\n                                }\n                            }\n                        }, \n                    ];\n                    service_pipeline = [\n                        {\n                            $match: query_params_service\n                        },\n                        {\n                            $project: {\n                                serviceuserId: {\n                                    $toObjectId: \"$UserId\"\n                                },\n                                _id: 1,\n                                Service_Name: 1,\n                                UserId: 1,\n                                Category: 1,\n                                Phone_Number: 1,\n                                Description: 1,\n                                availableDate: 1,\n                                Availability: 1,\n                                Address: 1,\n                                City: 1,\n                                State: 1,\n                                Zipcode: 1,\n                                Country: 1,\n                                ImageUrl: {\n                                    $ifNull: [\n                                        \"$ImageUrl\",\n                                        \"\"\n                                    ]\n                                }\n                            }\n                        },\n                        {\n                            $lookup: {\n                                from: \"User\",\n                                localField: \"serviceuserId\",\n                                foreignField: \"_id\",\n                                as: \"addresses\"\n                            }\n                        },\n                        {\n                            $unwind: \"$addresses\"\n                        },\n                        /* {\n                $unwind: '$addresses.address'\n            },\n\n            \n           { $match: { $expr: { $eq: [{ $toObjectId: '$AddressId' }, '$addresses.address._id'] } } },\n*/ {\n                            $project: {\n                                _id: 1,\n                                Name: \"$Service_Name\",\n                                UserId: 1,\n                                Category: 1,\n                                Phone_Number: 1,\n                                Description: 1,\n                                SKU: \"\",\n                                owner_name: {\n                                    $concat: [\n                                        \"$addresses.firstName\",\n                                        \",\",\n                                        \"$addresses.lastName\"\n                                    ]\n                                },\n                                address: {\n                                    $concat: [\n                                        \"$Address\",\n                                        \", \",\n                                        \"$City\",\n                                        \", \",\n                                        \"$State\",\n                                        \", \",\n                                        {\n                                            $toString: \"$Zipcode\"\n                                        }, \n                                    ]\n                                },\n                                distance: \"40\",\n                                availableDate: 1,\n                                Availability: 1,\n                                type: \"service\",\n                                ImageUrl: 1,\n                                owner_email: \"$addresses.userName\",\n                                markertitle: {\n                                    $concat: [\n                                        \"$Service_Name\",\n                                        \" at \",\n                                        \"$Address\",\n                                        \", \",\n                                        \"$City\",\n                                        \", \",\n                                        \"$State\",\n                                        \", \",\n                                        {\n                                            $toString: \"$Zipcode\"\n                                        }, \n                                    ]\n                                }\n                            }\n                        }, \n                    ];\n                    ;\n                    if (!(datafilter === \"resources\")) {\n                        _ctx.next = 13;\n                        break;\n                    }\n                    _ctx.next = 10;\n                    return _models_resources__WEBPACK_IMPORTED_MODULE_4__[\"default\"].aggregate(resource_pipeline).exec();\n                case 10:\n                    resources = _ctx.sent;\n                    _ctx.next = 29;\n                    break;\n                case 13:\n                    if (!(datafilter === \"services\")) {\n                        _ctx.next = 19;\n                        break;\n                    }\n                    _ctx.next = 16;\n                    return _models_services__WEBPACK_IMPORTED_MODULE_3__[\"default\"].aggregate(service_pipeline).exec();\n                case 16:\n                    resources = _ctx.sent;\n                    _ctx.next = 29;\n                    break;\n                case 19:\n                    ;\n                    _ctx.t0 = _slicedToArray;\n                    _ctx.next = 23;\n                    return Promise.all([\n                        _models_resources__WEBPACK_IMPORTED_MODULE_4__[\"default\"].aggregate(resource_pipeline).exec(),\n                        _models_services__WEBPACK_IMPORTED_MODULE_3__[\"default\"].aggregate(service_pipeline).exec(), \n                    ]);\n                case 23:\n                    _ctx.t1 = _ctx.sent;\n                    ref = (0, _ctx.t0)(_ctx.t1, 2);\n                    resources = ref[0];\n                    services = ref[1];\n                    ref;\n                    if (Object.keys(services).length != 0) {\n                        resources = resources.concat(services);\n                    }\n                case 29:\n                    destinations = [];\n                    for(k = 0; k < resources.length; k++){\n                        destinations.push(resources[k].address);\n                    }\n                    //let destination=new Set(destinations);\n                    destinations = Array.from(new Set(destinations));\n                    geocodearray = {};\n                    client = new _googlemaps_google_maps_services_js__WEBPACK_IMPORTED_MODULE_2__[\"Client\"]({});\n                    j = 0;\n                case 35:\n                    if (!(j < destinations.length)) {\n                        _ctx.next = 46;\n                        break;\n                    }\n                    ;\n                    _ctx.next = 39;\n                    return client.geocode({\n                        params: {\n                            address: [\n                                destinations[j]\n                            ],\n                            key: \"AIzaSyCW3O6PQctDxoSoSNYWVa44nXc1ze4V-Nw\"\n                        },\n                        timeout: 1000\n                    });\n                case 39:\n                    geocodedaddress = _ctx.sent;\n                    _ctx.next = 42;\n                    return (ref1 = geocodedaddress.data.results[0].geometry) === null || ref1 === void 0 ? void 0 : ref1.location;\n                case 42:\n                    geocodearray[destinations[j]] = _ctx.sent;\n                case 43:\n                    j++;\n                    _ctx.next = 35;\n                    break;\n                case 46:\n                    _ctx.t2 = client;\n                    _ctx.next = 49;\n                    return destinations;\n                case 49:\n                    _ctx.t3 = _ctx.sent;\n                    _ctx.t4 = [\n                        user_location\n                    ];\n                    _ctx.t5 = {\n                        destinations: _ctx.t3,\n                        origins: _ctx.t4,\n                        key: \"AIzaSyCW3O6PQctDxoSoSNYWVa44nXc1ze4V-Nw\"\n                    };\n                    _ctx.t6 = {\n                        params: _ctx.t5,\n                        timeout: 1000\n                    };\n                    _ctx.next = 55;\n                    return _ctx.t2.distancematrix.call(_ctx.t2, _ctx.t6);\n                case 55:\n                    distance_matrix_userlocation = _ctx.sent;\n                    ;\n                    if (!(miles != \"\" && city != \"\")) {\n                        _ctx.next = 68;\n                        break;\n                    }\n                    _ctx.t7 = client;\n                    _ctx.next = 61;\n                    return destinations;\n                case 61:\n                    _ctx.t8 = _ctx.sent;\n                    _ctx.t9 = [\n                        city\n                    ];\n                    _ctx.t10 = {\n                        destinations: _ctx.t8,\n                        origins: _ctx.t9,\n                        key: \"AIzaSyCW3O6PQctDxoSoSNYWVa44nXc1ze4V-Nw\"\n                    };\n                    _ctx.t11 = {\n                        params: _ctx.t10,\n                        timeout: 1000\n                    };\n                    _ctx.next = 67;\n                    return _ctx.t7.distancematrix.call(_ctx.t7, _ctx.t11);\n                case 67:\n                    distance_matrix_city = _ctx.sent;\n                case 68:\n                    j = 0;\n                case 69:\n                    _ctx.t12 = j;\n                    _ctx.next = 72;\n                    return resources.length;\n                case 72:\n                    _ctx.t13 = _ctx.sent;\n                    if (!(_ctx.t12 < _ctx.t13)) {\n                        _ctx.next = 101;\n                        break;\n                    }\n                    _ctx.next = 76;\n                    return geocodearray[resources[j].address];\n                case 76:\n                    resources[j][\"location\"] = _ctx.sent;\n                    i = 0;\n                case 78:\n                    _ctx.t14 = i;\n                    _ctx.next = 81;\n                    return destinations.length;\n                case 81:\n                    _ctx.t15 = _ctx.sent;\n                    if (!(_ctx.t14 < _ctx.t15)) {\n                        _ctx.next = 98;\n                        break;\n                    }\n                    if (!(resources[j][\"address\"] == destinations[i])) {\n                        _ctx.next = 95;\n                        break;\n                    }\n                    if (!(miles != \"\" && city != \"\")) {\n                        _ctx.next = 90;\n                        break;\n                    }\n                    _ctx.t16 = calculateMiles;\n                    _ctx.next = 88;\n                    return distance_matrix_city.data.rows[0].elements[i].distance.text;\n                case 88:\n                    _ctx.t17 = _ctx.sent;\n                    resources[j][\"distance_from_city\"] = (0, _ctx.t16)(_ctx.t17);\n                case 90:\n                    _ctx.t18 = calculateMiles;\n                    _ctx.next = 93;\n                    return distance_matrix_userlocation.data.rows[0].elements[i].distance.text;\n                case 93:\n                    _ctx.t19 = _ctx.sent;\n                    resources[j][\"distance\"] = (0, _ctx.t18)(_ctx.t19);\n                case 95:\n                    i++;\n                    _ctx.next = 78;\n                    break;\n                case 98:\n                    j++;\n                    _ctx.next = 69;\n                    break;\n                case 101:\n                    if (!(miles != \"\" && city != \"\")) {\n                        _ctx.next = 105;\n                        break;\n                    }\n                    _ctx.next = 104;\n                    return resources.filter(function(m) {\n                        return parseFloat(m[\"distance_from_city\"]) <= miles;\n                    });\n                case 104:\n                    resources = _ctx.sent;\n                case 105:\n                    if (!(miles != \"\" && city == \"\")) {\n                        _ctx.next = 109;\n                        break;\n                    }\n                    _ctx.next = 108;\n                    return resources.filter(function(m) {\n                        return parseFloat(m[\"distance\"]) <= miles;\n                    });\n                case 108:\n                    resources = _ctx.sent;\n                case 109:\n                    _ctx.next = 111;\n                    return resources;\n                case 111:\n                    return _ctx.abrupt(\"return\", _ctx.sent);\n                case 112:\n                case \"end\":\n                    return _ctx.stop();\n            }\n        }, _callee);\n    }));\n    return function getData(query_params_resource, query_params_service, user_location, city, miles, datafilter) {\n        return _ref.apply(this, arguments);\n    };\n}();\nrouter.post(\"/\", function() {\n    var _ref = _asyncToGenerator(regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(_req, res) {\n        var userid, data, resource_service, id, resource_sku, quantity, category_name, category_id, query_params, service_Id, resource_Id, transaction_sku, update, resource, remaining_resource, service, category, currentDate, transaction;\n        return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_ctx) {\n            while(1)switch(_ctx.prev = _ctx.next){\n                case 0:\n                    userid = _req.body.user_id;\n                    data = _req.body.resource;\n                    resource_service = data.type;\n                    id = data._id;\n                    resource_sku = 0;\n                    quantity = 0;\n                    ;\n                    ;\n                    query_params = {\n                        _id: \"\"\n                    };\n                    service_Id = \"\";\n                    resource_Id = \"\";\n                    transaction_sku = 0;\n                    if (!(resource_service == \"resource\")) {\n                        _ctx.next = 33;\n                        break;\n                    }\n                    quantity = _req.body.quantity;\n                    resource_Id = id;\n                    transaction_sku = quantity;\n                    resource_sku = Number(quantity) * -1;\n                    query_params._id = id;\n                    update = {\n                        $inc: {\n                            SKU: resource_sku\n                        }\n                    };\n                    _ctx.next = 21;\n                    return _models_resources__WEBPACK_IMPORTED_MODULE_4__[\"default\"].findById(id);\n                case 21:\n                    resource = _ctx.sent;\n                    _ctx.next = 24;\n                    return resource.Resource_Name;\n                case 24:\n                    category_name = _ctx.sent;\n                    _ctx.next = 27;\n                    return resource.SKU;\n                case 27:\n                    _ctx.t0 = _ctx.sent;\n                    _ctx.t1 = quantity;\n                    remaining_resource = _ctx.t0 - _ctx.t1;\n                    //console.log(await remaining_resource);\n                    /*if (await remaining_resource == 0) {\n            Resources.deleteOne(query_params, function (error) {\n                if (error) throw error;\n            });\n        } else {*/ _models_resources__WEBPACK_IMPORTED_MODULE_4__[\"default\"].updateOne(query_params, update, {\n                        new: true\n                    }, function(err, result) {\n                        if (err) throw err;\n                    });\n                    _ctx.next = 40;\n                    break;\n                case 33:\n                    _ctx.next = 35;\n                    return _models_services__WEBPACK_IMPORTED_MODULE_3__[\"default\"].findById(id);\n                case 35:\n                    service = _ctx.sent;\n                    _ctx.next = 38;\n                    return service.Service_Name;\n                case 38:\n                    category_name = _ctx.sent;\n                    service_Id = id;\n                case 40:\n                    _ctx.next = 42;\n                    return _models_category__WEBPACK_IMPORTED_MODULE_5__[\"default\"].findOne({\n                        Name: category_name\n                    });\n                case 42:\n                    category = _ctx.sent;\n                    if (!(category != null)) {\n                        _ctx.next = 49;\n                        break;\n                    }\n                    _ctx.next = 46;\n                    return category._id;\n                case 46:\n                    category_id = _ctx.sent;\n                    _ctx.next = 50;\n                    break;\n                case 49:\n                    {\n                        category_id = 0;\n                    }\n                case 50:\n                    currentDate = new Date();\n                    _ctx.next = 53;\n                    return new _models_transactionLogger__WEBPACK_IMPORTED_MODULE_6__[\"default\"]({\n                        UserId: userid,\n                        ResourceId: resource_Id,\n                        ServiceId: service_Id,\n                        Date: currentDate,\n                        CategoryId: category_id,\n                        Quantity: transaction_sku,\n                        Type: \"Get Help\"\n                    });\n                case 53:\n                    transaction = _ctx.sent;\n                    //console.log(await transaction);\n                    transaction.save(function(err, result) {\n                        if (err) throw err;\n                        res.send(result);\n                    });\n                case 55:\n                case \"end\":\n                    return _ctx.stop();\n            }\n        }, _callee);\n    }));\n    return function(_req, res) {\n        return _ref.apply(this, arguments);\n    };\n}());\n// Retrieve  resources and services\nrouter.get(\"/\", function() {\n    var _ref = _asyncToGenerator(regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(_req, res) {\n        var response, query_params_resource, query_params_service, name, city, miles, datafilter, user_location;\n        return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_ctx) {\n            while(1)switch(_ctx.prev = _ctx.next){\n                case 0:\n                    response = {\n                        resources: [\n                            {}\n                        ]\n                    };\n                    query_params_resource = {};\n                    query_params_service = {};\n                    name = _req.query.name;\n                    city = _req.query.city;\n                    miles = _req.query.miles;\n                    datafilter = _req.query.datafilter;\n                    user_location = _req.query.user_location;\n                    console.log(user_location);\n                    if (name != \"\" && city == \"\" && miles == \"\") {\n                        //name only\n                        query_params_resource = {\n                            Resource_Name: {\n                                $regex: name.trim(),\n                                $options: \"i\"\n                            }\n                        };\n                        query_params_service = {\n                            Service_Name: {\n                                $regex: name.trim(),\n                                $options: \"i\"\n                            }\n                        };\n                    } else if (name == \"\" && city != \"\" && miles == \"\") {\n                        //city only\n                        city = city.slice(0, city.indexOf(\",\"));\n                        query_params_resource = {\n                            City: {\n                                $regex: city.trim(),\n                                $options: \"i\"\n                            }\n                        };\n                        query_params_service = {\n                            City: {\n                                $regex: city.trim(),\n                                $options: \"i\"\n                            }\n                        };\n                    } else if (name != \"\" && city != \"\" && miles == \"\") {\n                        /* else if (name == '' && city!='' && miles!='') {//city and miles\n        \n        //update\n       \n    }\n    else if (name == '' && city=='' && miles!='') {//miles only ask to update\n        //update this\n       \n    }\n    else if (name != '' && city=='' && miles!=''){//name and miles ask to update\n        //update this\n        query_params_resource = { Resource_Name: {'$regex': name.trim(),$options:'i'} };\n        query_params_service = { Service_Name: {'$regex': name.trim(),$options:'i'}};\n    }*/ //name and city\n                        city = city.slice(0, city.indexOf(\",\"));\n                        query_params_resource = {\n                            Resource_Name: {\n                                $regex: name.trim(),\n                                $options: \"i\"\n                            },\n                            City: {\n                                $regex: city.trim(),\n                                $options: \"i\"\n                            }\n                        };\n                        query_params_service = {\n                            Service_Name: {\n                                $regex: name.trim(),\n                                $options: \"i\"\n                            },\n                            City: {\n                                $regex: city.trim(),\n                                $options: \"i\"\n                            }\n                        };\n                    } else if (name != \"\" && city != \"\" && miles != \"\") {\n                        //name,city and miles\n                        //update this\n                        query_params_resource = {\n                            Resource_Name: {\n                                $regex: name.trim(),\n                                $options: \"i\"\n                            }\n                        };\n                        query_params_service = {\n                            Service_Name: {\n                                $regex: name.trim(),\n                                $options: \"i\"\n                            }\n                        };\n                    } else {}\n                    getData(query_params_resource, query_params_service, user_location, city, miles, datafilter).then(function(resources) {\n                        response.resources = resources.filter(function(resource) {\n                            return resource.type === \"resource\" ? resource.SKU > 0 : resource.availableDate >= Date.now();\n                        }); //console.log(response);*/;console.log(response);\n                        res.send(response);\n                    }).catch(function(e) {\n                        console.log(e);\n                    });\n                case 11:\n                case \"end\":\n                    return _ctx.stop();\n            }\n        }, _callee);\n    }));\n    return function(_req, res) {\n        return _ref.apply(this, arguments);\n    };\n}());\n//get item by id\nrouter.get(\"/search\", function() {\n    var _ref = _asyncToGenerator(regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(_req, res) {\n        var ObjectId, id, user_location, response, miles, city, datafilter, query_params_resource, query_params_service;\n        return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_ctx) {\n            while(1)switch(_ctx.prev = _ctx.next){\n                case 0:\n                    ObjectId = __webpack_require__(/*! mongodb */ \"mongodb\").ObjectID;\n                    id = _req.query.id;\n                    user_location = _req.query.user_location;\n                    response = {\n                        resources: [\n                            {}\n                        ],\n                        user_currentaddress: \"\"\n                    };\n                    miles = \"\";\n                    city = \"\";\n                    datafilter = _req.query.item_type;\n                    query_params_resource = {};\n                    query_params_service = {};\n                    if (datafilter == \"resources\") {\n                        query_params_resource = {\n                            _id: new ObjectId(id)\n                        };\n                        query_params_service = {};\n                    } else {\n                        query_params_service = {\n                            _id: new ObjectId(id)\n                        };\n                        query_params_resource = {};\n                    }\n                    getData(query_params_resource, query_params_service, user_location, city, miles, datafilter).then(function(resources) {\n                        response.resources = resources;\n                        console.log(response);\n                        res.send(response);\n                    }).catch(function(e) {\n                        console.log(e);\n                    });\n                case 11:\n                case \"end\":\n                    return _ctx.stop();\n            }\n        }, _callee);\n    }));\n    return function(_req, res) {\n        return _ref.apply(this, arguments);\n    };\n}());\n//get item by user id\nrouter.get(\"/search/userid\", function() {\n    var _ref = _asyncToGenerator(regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(_req, res) {\n        var ObjectId, userid, response, query_params_service, query_params_resource, service_user_pipeline, resources_pipeline, query_params_getresource, query_params_getservice, resource_get_pipeline, service_get_pipeline, ref, giveresource, giveservice, ref2, getresource, getservice;\n        return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_ctx) {\n            while(1)switch(_ctx.prev = _ctx.next){\n                case 0:\n                    console.log(\"inside gethelpsearchuserid\");\n                    ObjectId = __webpack_require__(/*! mongodb */ \"mongodb\").ObjectID;\n                    userid = _req.query.userid;\n                    response = {\n                        resources: [\n                            {}\n                        ],\n                        getresources: [\n                            {}\n                        ]\n                    };\n                    query_params_service = {\n                        UserId: userid\n                    };\n                    query_params_resource = {\n                        UserId: userid\n                    };\n                    service_user_pipeline = [\n                        {\n                            $match: query_params_service\n                        },\n                        {\n                            $project: {\n                                _id: 1,\n                                Name: \"$Service_Name\",\n                                UserId: 1,\n                                Category: 1,\n                                Phone_Number: 1,\n                                Description: 1,\n                                SKU: \"\",\n                                Address: 1,\n                                City: 1,\n                                State: 1,\n                                Zipcode: 1,\n                                Country: 1,\n                                availableDate: 1,\n                                //Availability:1,\n                                type: \"service\",\n                                ImageUrl: {\n                                    $ifNull: [\n                                        \"$ImageUrl\",\n                                        \"\"\n                                    ]\n                                },\n                                Availability: {\n                                    $ifNull: [\n                                        \"$Availability\",\n                                        \"\"\n                                    ]\n                                }\n                            }\n                        }, \n                    ];\n                    resources_pipeline = [\n                        {\n                            $match: query_params_resource\n                        },\n                        {\n                            $project: {\n                                _id: 1,\n                                Name: \"$Resource_Name\",\n                                UserId: 1,\n                                Category: 1,\n                                Phone_Number: 1,\n                                Description: 1,\n                                SKU: 1,\n                                Address: 1,\n                                City: 1,\n                                State: 1,\n                                Zipcode: 1,\n                                Country: 1,\n                                availableDate: \"\",\n                                //Availability:'',\n                                type: \"resource\",\n                                ImageUrl: {\n                                    $ifNull: [\n                                        \"$ImageUrl\",\n                                        \"\"\n                                    ]\n                                },\n                                Availability: {\n                                    $ifNull: [\n                                        \"$Availability\",\n                                        \"\"\n                                    ]\n                                }\n                            }\n                        }, \n                    ];\n                    query_params_getresource = {\n                        UserId: userid,\n                        ServiceId: \"\",\n                        Type: \"Get Help\"\n                    };\n                    query_params_getservice = {\n                        UserId: userid,\n                        Type: \"Get Help\",\n                        ResourceId: \"\"\n                    };\n                    resource_get_pipeline = [\n                        {\n                            $match: query_params_getresource\n                        },\n                        {\n                            $project: {\n                                _id: 1,\n                                Trans_UserId: \"$UserId\",\n                                ResourceId: {\n                                    $toObjectId: \"$ResourceId\"\n                                },\n                                ServiceId: 1,\n                                Date: 1,\n                                CategoryId: 1,\n                                SKU: \"$Quantity\",\n                                type: \"resource\"\n                            }\n                        },\n                        {\n                            $lookup: {\n                                from: \"Resource\",\n                                localField: \"ResourceId\",\n                                foreignField: \"_id\",\n                                as: \"transactions\"\n                            }\n                        },\n                        {\n                            $unwind: \"$transactions\"\n                        },\n                        {\n                            $project: {\n                                _id: 1,\n                                Name: \"$transactions.Resource_Name\",\n                                Trans_UserId: 1,\n                                Category: \"$transactions.Category\",\n                                Phone_Number: \"$transactions.Phone_Number\",\n                                Description: \"$transactions.Description\",\n                                SKU: 1,\n                                address: {\n                                    $concat: [\n                                        \"$transactions.Address\",\n                                        \",\",\n                                        \"$transactions.City\",\n                                        \",\",\n                                        \"$transactions.State\",\n                                        \",\",\n                                        \"$transactions.Country\",\n                                        \",\",\n                                        {\n                                            $toString: \"$transactions.Zipcode\"\n                                        }, \n                                    ]\n                                },\n                                availableDate: \"\",\n                                type: 1,\n                                ImageUrl: {\n                                    $ifNull: [\n                                        \"$transactions.ImageUrl\",\n                                        \"\"\n                                    ]\n                                },\n                                Date: 1,\n                                Availability: {\n                                    $ifNull: [\n                                        \"$transactions.Availability\",\n                                        \"\"\n                                    ]\n                                }\n                            }\n                        }, \n                    ];\n                    service_get_pipeline = [\n                        {\n                            $match: query_params_getservice\n                        },\n                        {\n                            $project: {\n                                _id: 1,\n                                Trans_UserId: \"$UserId\",\n                                ResourceId: 1,\n                                ServiceId: {\n                                    $toObjectId: \"$ServiceId\"\n                                },\n                                Date: 1,\n                                CategoryId: 1,\n                                Quantity: 1,\n                                type: \"service\"\n                            }\n                        },\n                        {\n                            $lookup: {\n                                from: \"Services\",\n                                localField: \"ServiceId\",\n                                foreignField: \"_id\",\n                                as: \"transactions\"\n                            }\n                        },\n                        {\n                            $unwind: \"$transactions\"\n                        },\n                        {\n                            $project: {\n                                _id: 1,\n                                Name: \"$transactions.Service_Name\",\n                                Trans_UserId: 1,\n                                Category: \"$transactions.Category\",\n                                Phone_Number: \"$transactions.Phone_Number\",\n                                Description: \"$transactions.Description\",\n                                SKU: \"\",\n                                address: {\n                                    $concat: [\n                                        \"$transactions.Address\",\n                                        \",\",\n                                        \"$transactions.City\",\n                                        \",\",\n                                        \"$transactions.State\",\n                                        \",\",\n                                        \"$transactions.Country\",\n                                        \",\",\n                                        {\n                                            $toString: \"$transactions.Zipcode\"\n                                        }, \n                                    ]\n                                },\n                                availableDate: \"$transactions.availableDate\",\n                                type: 1,\n                                ImageUrl: {\n                                    $ifNull: [\n                                        \"$transactions.ImageUrl\",\n                                        \"\"\n                                    ]\n                                },\n                                Date: 1,\n                                Availability: {\n                                    $ifNull: [\n                                        \"$transactions.Availability\",\n                                        \"\"\n                                    ]\n                                }\n                            }\n                        }, \n                    ];\n                    _ctx.t0 = _slicedToArray;\n                    _ctx.next = 15;\n                    return Promise.all([\n                        _models_resources__WEBPACK_IMPORTED_MODULE_4__[\"default\"].aggregate(resources_pipeline).exec(),\n                        _models_services__WEBPACK_IMPORTED_MODULE_3__[\"default\"].aggregate(service_user_pipeline).exec(), \n                    ]);\n                case 15:\n                    _ctx.t1 = _ctx.sent;\n                    ref = (0, _ctx.t0)(_ctx.t1, 2);\n                    giveresource = ref[0];\n                    giveservice = ref[1];\n                    _ctx.next = 21;\n                    return giveresource;\n                case 21:\n                    response.resources = _ctx.sent;\n                    _ctx.t2 = _slicedToArray;\n                    _ctx.next = 25;\n                    return Promise.all([\n                        _models_transactionLogger__WEBPACK_IMPORTED_MODULE_6__[\"default\"].aggregate(resource_get_pipeline).exec(),\n                        _models_transactionLogger__WEBPACK_IMPORTED_MODULE_6__[\"default\"].aggregate(service_get_pipeline).exec(), \n                    ]);\n                case 25:\n                    _ctx.t3 = _ctx.sent;\n                    ref2 = (0, _ctx.t2)(_ctx.t3, 2);\n                    getresource = ref2[0];\n                    getservice = ref2[1];\n                    _ctx.next = 31;\n                    return getresource;\n                case 31:\n                    response.getresources = _ctx.sent;\n                    _ctx.t4 = Object;\n                    _ctx.next = 35;\n                    return giveservice;\n                case 35:\n                    _ctx.t5 = _ctx.sent;\n                    _ctx.t6 = _ctx.t4.keys.call(_ctx.t4, _ctx.t5).length;\n                    if (!(_ctx.t6 != 0)) {\n                        _ctx.next = 45;\n                        break;\n                    }\n                    _ctx.t7 = response.resources;\n                    _ctx.next = 41;\n                    return giveservice;\n                case 41:\n                    _ctx.t8 = _ctx.sent;\n                    _ctx.next = 44;\n                    return _ctx.t7.concat.call(_ctx.t7, _ctx.t8);\n                case 44:\n                    response.resources = _ctx.sent;\n                case 45:\n                    _ctx.t9 = Object;\n                    _ctx.next = 48;\n                    return getservice;\n                case 48:\n                    _ctx.t10 = _ctx.sent;\n                    _ctx.t11 = _ctx.t9.keys.call(_ctx.t9, _ctx.t10).length;\n                    if (!(_ctx.t11 != 0)) {\n                        _ctx.next = 58;\n                        break;\n                    }\n                    _ctx.t12 = response.getresources;\n                    _ctx.next = 54;\n                    return getservice;\n                case 54:\n                    _ctx.t13 = _ctx.sent;\n                    _ctx.next = 57;\n                    return _ctx.t12.concat.call(_ctx.t12, _ctx.t13);\n                case 57:\n                    response.getresources = _ctx.sent;\n                case 58:\n                    _ctx.t14 = //console.log(await response);\n                    res;\n                    _ctx.next = 61;\n                    return response;\n                case 61:\n                    _ctx.t15 = _ctx.sent;\n                    _ctx.t14.send.call(_ctx.t14, _ctx.t15);\n                case 63:\n                case \"end\":\n                    return _ctx.stop();\n            }\n        }, _callee);\n    // console.log(response);\n    }));\n    return function(_req, res) {\n        return _ref.apply(this, arguments);\n    };\n}());\n//delete item by id\nrouter.post(\"/delete/id\", function() {\n    var _ref = _asyncToGenerator(regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(_req, res) {\n        var ObjectId, id, type;\n        return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_ctx) {\n            while(1)switch(_ctx.prev = _ctx.next){\n                case 0:\n                    ObjectId = __webpack_require__(/*! mongodb */ \"mongodb\").ObjectID;\n                    id = _req.body.id;\n                    type = _req.body.type;\n                    if (type == \"resource\") {\n                        _models_resources__WEBPACK_IMPORTED_MODULE_4__[\"default\"].updateOne({\n                            _id: id\n                        }, {\n                            SKU: 0,\n                            Availability: \"false\"\n                        }, {\n                            new: true\n                        }, function(err, result) {\n                            if (err) {\n                                res.send(err);\n                            } else {\n                                //res.send(result);\n                                console.log(\"Deleted successfully\");\n                                res.send(result);\n                            }\n                        });\n                    } else {\n                        _models_services__WEBPACK_IMPORTED_MODULE_3__[\"default\"].updateOne({\n                            _id: id\n                        }, {\n                            availableDate: new Date(\"2000-05-18T16:00:00Z\"),\n                            Availability: \"false\"\n                        }, {\n                            new: true\n                        }, function(err, result) {\n                            if (err) {\n                                console.log(err);\n                            } else {\n                                console.log(\"Deleted successfully\");\n                                res.send(result);\n                            }\n                        });\n                    }\n                case 4:\n                case \"end\":\n                    return _ctx.stop();\n            }\n        }, _callee);\n    }));\n    return function(_req, res) {\n        return _ref.apply(this, arguments);\n    };\n}());\nrouter.post(\"/update_resource\", function() {\n    var _ref = _asyncToGenerator(regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(_req, res) {\n        var ObjectId, id, Resource_Name, Category1, Description, Phone_Number, Address, SKU, City, State, Zipcode, Country, ImageUrl;\n        return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_ctx) {\n            while(1)switch(_ctx.prev = _ctx.next){\n                case 0:\n                    ObjectId = __webpack_require__(/*! mongodb */ \"mongodb\").ObjectID;\n                    id = _req.body.id;\n                    Resource_Name = _req.body.Resource_Name;\n                    Category1 = _req.body.Category;\n                    Description = _req.body.Description;\n                    Phone_Number = _req.body.Phone_Number;\n                    Address = _req.body.Address;\n                    SKU = _req.body.SKU;\n                    City = _req.body.City;\n                    State = _req.body.State;\n                    Zipcode = _req.body.Zipcode;\n                    Country = _req.body.Country;\n                    ImageUrl = _req.body.ImageUrl;\n                    _models_resources__WEBPACK_IMPORTED_MODULE_4__[\"default\"].updateOne({\n                        _id: id\n                    }, {\n                        Resource_Name: Resource_Name,\n                        Category: Category1,\n                        Description: Description,\n                        Phone_Number: Phone_Number,\n                        Address: Address,\n                        SKU: SKU,\n                        City: City,\n                        State: State,\n                        Zipcode: Zipcode,\n                        Country: Country,\n                        ImageUrl: ImageUrl\n                    }, {\n                        new: true\n                    }, function(err, result) {\n                        //\n                        if (err) {\n                            res.send(err);\n                        } else {\n                            //res.send(result);\n                            console.log(\"Updated successfully\");\n                            res.send(result);\n                        }\n                    });\n                case 14:\n                case \"end\":\n                    return _ctx.stop();\n            }\n        }, _callee);\n    }));\n    return function(_req, res) {\n        return _ref.apply(this, arguments);\n    };\n}());\nrouter.post(\"/update_service\", function() {\n    var _ref = _asyncToGenerator(regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(_req, res) {\n        var ObjectId, id, Service_Name, Category2, Description, Phone_Number, Address, availableDate, City, State, Zipcode, Country, ImageUrl;\n        return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_ctx) {\n            while(1)switch(_ctx.prev = _ctx.next){\n                case 0:\n                    ObjectId = __webpack_require__(/*! mongodb */ \"mongodb\").ObjectID;\n                    id = _req.body.id;\n                    Service_Name = _req.body.Service_Name;\n                    Category2 = _req.body.Category;\n                    Description = _req.body.Description;\n                    Phone_Number = _req.body.Phone_Number;\n                    Address = _req.body.Address;\n                    availableDate = _req.body.availableDate;\n                    City = _req.body.City;\n                    State = _req.body.State;\n                    Zipcode = _req.body.Zipcode;\n                    Country = _req.body.Country;\n                    ImageUrl = _req.body.ImageUrl;\n                    _models_services__WEBPACK_IMPORTED_MODULE_3__[\"default\"].updateOne({\n                        _id: id\n                    }, {\n                        Service_Name: Service_Name,\n                        Category: Category2,\n                        Description: Description,\n                        Phone_Number: Phone_Number,\n                        Address: Address,\n                        availableDate: availableDate,\n                        City: City,\n                        State: State,\n                        Zipcode: Zipcode,\n                        Country: Country,\n                        ImageUrl: ImageUrl\n                    }, {\n                        new: true\n                    }, function(err, result) {\n                        //\n                        if (err) {\n                            res.send(err);\n                        } else {\n                            //res.send(result);\n                            console.log(\"Updated successfully\");\n                            res.send(result);\n                        }\n                    });\n                case 14:\n                case \"end\":\n                    return _ctx.stop();\n            }\n        }, _callee);\n    }));\n    return function(_req, res) {\n        return _ref.apply(this, arguments);\n    };\n}());\n/* harmony default export */ __webpack_exports__[\"default\"] = (router);\n\n\n//# sourceURL=webpack:///./src/server/routes/gethelp.ts?");

/***/ })

};